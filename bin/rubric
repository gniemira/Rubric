#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'rubric'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'Rubric helps you name things. Like a cat or a child or a project or a car or your novel or whatever'

version Rubric::VERSION

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

def rubric_list
  
  rubric_list = [ "rocket", 
                  "laser",  
                  "dinosaur", 
                  "old people", 
                  "tiger", 
                  "chicken",  
                  "steel",  
                  "crystal",  
                  "engine", 
                  "lady", 
                  "baby", 
                  "rhino",  
                  "panda",  
                  "apocalypse", 
                  "zombie", 
                  "ninja",  
                  "harrison ford",  
                  "space",  
                  "underpants", 
                  "future", 
                  "robot",  
                  "chocolate",  
                  "shark",  
                  "jet",  
                  "gun",  
                  "guitar solo",  
                  "beard",  
                  "sparkle",  
                  "fire", 
                  "monkey", 
                  "cyber",  
                  "fist", 
                  "unicorn",  
                  "mustache", 
                  "juice", 
                  "winning", 
                  "charlie sheen", 
                  "rapture", 
                  "torture", 
                  "spasm", 
                  "bro", 
                  "jedi", 
                  "toupee",
                  "cheeseburger",
                  "Coolio",
                  "bone", 
                  "Poland", 
                  "satin", 
                  "butter", 
                  "muffin", 
                  "milkshake",
                  "sword", 
                  "giant", 
                  "queen", 
                  "bear", 
                  "rainbow", 
                  "tornado", 
                  "lips", 
                  "carrot", 
                  "donut", 
                  "fraternity",  
                  "trophy", 
                  "penguin",  
                  "shake weight", 
                  "snuggie",
                  "bacon",
                  "explosion",
                  "womb",
                  "rampage",
                  "gorilla",

                ]
end

desc 'Get will fetch you a name from the rubric'
arg_name 'Describe arguments to get here'
command :get do |c|
  c.desc "Say it, don't spray it"
  c.switch [:s, :say]

  c.desc "Copy the rubric name to the pasteboard"
  c.switch [:c, :copy]

  c.desc 'How many do you want?'
  c.default_value '1'
  c.flag [:n, :number]
  c.action do |global_options,options,args|
    number = options[:n].to_i
    def get_rubric
      name = rubric_list.sample + " " + rubric_list.sample
      phrase = ["The rubric is infallible", "Jumanji", "Unggggh", "Stop it", "Sigh", "SHAZAM!"].sample
      result = phrase + ": " + name
      puts result
      
      if :s == true
        system "say #{result}"
      end

      if :c == true
        system "echo #{name} | pbcopy"
        puts "Copied #{name}"
      end
    end

    if number > 1
      number.times do
        get_rubric
      end
    else
      get_rubric
    end
  end
end

desc 'List the words in the rubric'
arg_name 'No args'
command :list do |c|
  c.action do |global_options,options,args|
    rubric_list.each do |name|
      puts name
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
